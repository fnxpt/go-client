// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VulnerabilityItem vulnerability item
//
// swagger:model VulnerabilityItem
type VulnerabilityItem struct {

	// The artifact digests which the vulnerability belonged
	ArtifactDigests []string `json:"artifact_digests"`

	// A separated list of CWE Ids associated with this vulnerability
	CweIds []string `json:"cwe_ids"`

	// The descriptopm of the vulnerability.
	Description string `json:"description,omitempty"`

	// The version of the package containing the fix if available.
	FixVersion string `json:"fix_version,omitempty"`

	// The unique identifier of the vulnerability.
	ID string `json:"id,omitempty"`

	// The list of link to the upstream database with the full description of the vulnerability.
	Links []string `json:"links"`

	// An operating system or software dependency package containing the vulnerability.
	Package string `json:"package,omitempty"`

	// The CVSS3 and CVSS2 based scores and attack vector for the vulnerability item
	PreferredCvss *CVSS `json:"preferred_cvss,omitempty"`

	// A standard scale for measuring the severity of a vulnerability.
	Severity string `json:"severity,omitempty"`

	// A collection of vendor specific attributes for the vulnerability item with each attribute represented as a key-value pair.
	VendorAttributes interface{} `json:"vendor_attributes,omitempty"`
}

// Validate validates this vulnerability item
func (m *VulnerabilityItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreferredCvss(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilityItem) validatePreferredCvss(formats strfmt.Registry) error {

	if swag.IsZero(m.PreferredCvss) { // not required
		return nil
	}

	if m.PreferredCvss != nil {
		if err := m.PreferredCvss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferred_cvss")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilityItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilityItem) UnmarshalBinary(b []byte) error {
	var res VulnerabilityItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
